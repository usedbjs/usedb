(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{112:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return m}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=a.a.createContext({}),p=function(e){var n=a.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=p(e.components);return a.a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},b=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=p(t),b=r,m=u["".concat(i,".").concat(b)]||u[b]||d[b]||o;return t?a.a.createElement(m,l(l({ref:n},s),{},{components:t})):a.a.createElement(m,l({ref:n},s))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=b;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},93:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return l})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return p}));var r=t(3),a=t(7),o=(t(0),t(112)),i={id:"relationships",title:"Relationships",sidebar_label:"Relationships"},l={unversionedId:"laravel/relationships",id:"laravel/relationships",isDocsHomePage:!1,title:"Relationships",description:"Fetching Data",source:"@site/docs/laravel/relationships.md",slug:"/laravel/relationships",permalink:"/usedb/docs/laravel/relationships",version:"current",sidebar_label:"Relationships",sidebar:"someSidebar",previous:{title:"Security",permalink:"/usedb/docs/laravel/security"},next:{title:"FAQ's",permalink:"/usedb/docs/faq"}},c=[{value:"Fetching Data",id:"fetching-data",children:[]}],s={toc:c};function p(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"fetching-data"},"Fetching Data"),Object(o.b)("p",null,"When you want objects to be returned with their associated models, then you have to mention the property to access child elements from a parent in the ",Object(o.b)("inlineCode",{parentName:"p"},"include")," property of ",Object(o.b)("inlineCode",{parentName:"p"},"payload")," field of the JSON provided."),Object(o.b)("p",null,"Let's say, we have an OneToMany relation between Blogs and comments."),Object(o.b)("p",null,"Blog.php"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-php"}),"use Illuminate\\Database\\Eloquent\\Model;\nuse Watson\\Validating\\ValidatingTrait;\n\nclass Blog extends Model\n{\n    use HasFactory;\n    use ValidatingTrait;\n\n   public function comments()\n    {\n\n        return $this->hasMany('App\\Models\\Comment');\n    }\n}\n")),Object(o.b)("p",null,"Comment.php"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-php"}),"use Illuminate\\Database\\Eloquent\\Model;\nuse Watson\\Validating\\ValidatingTrait;\n\nclass Comment extends Model\n{\n    use HasFactory;\n\n    public function blog()\n    {\n        return $this->belongsTo('App\\Models\\Blog');\n    }\n}\n")),Object(o.b)("p",null,"To retrieve the blog with its associated comments, we have to provide the name of the relationship method defined in the base model in the ",Object(o.b)("inlineCode",{parentName:"p"},"include")," field of JSON. Here, in the Blog model, the method ",Object(o.b)("inlineCode",{parentName:"p"},"comments")," define the relationship of Blog to comments, so we need to provide its name in the ",Object(o.b)("inlineCode",{parentName:"p"},"include")," field of JSON."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-jsx"}),'{\n    "collection":"Blog",\n    "operation":"findOne",\n    "payload": {\n        "where":{\n            "id": 139\n        },\n       "include":{\n            "comments":{}\n        }\n    }\n}\n')))}p.isMDXComponent=!0}}]);